"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import json
import os

from django.utils.translation import ugettext_lazy as _

# Path
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = os.path.dirname(BASE_DIR)
CONF_DIR = os.path.join(ROOT_DIR, '.django-conf')
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')


# Debug option
debug = os.environ.get('DEBUG', '')
if not debug:
    debug = 'True'
DEBUG = debug == 'True'
print('DEBUG =', DEBUG)


# Config
if DEBUG:
    config = json.loads(open(os.path.join(CONF_DIR, 'settings_debug.json')).read())
else:
    config = json.loads(open(os.path.join(CONF_DIR, 'settings_release.json')).read())

# Secret
SECRET_KEY = config['django']['secret_key']
ALLOWED_HOSTS = config['django']['allowed_hosts']


# CORS
CORS_ORIGIN_ALLOW_ALL = config['django']['cors_allow_all']
CORS_ORIGIN_WHITELIST = config['django']['cors_white_list']


# Session
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'common',
    'house',
    'region',
    'inquiry',
    'main',

    'storages',  # django-storage
    'corsheaders',  # django-cors-headers
    'geoposition',  # django-geoposition
    'smart_selects',  # django-smart-selects
    'nested_admin',
    'adminsortable2',
    'rest_framework',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATES_DIR,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
DATABASES = config['databases']


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Google map
GEOPOSITION_GOOGLE_MAPS_API_KEY = config['third-party']['google_map_key']


# Internationalization
LANGUAGE_CODE = 'ko-KR'
LANGUAGES = [
  ('ko', _('Korean')),
  ('en', _('English')),
]
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)


# Time
TIME_ZONE = 'Asia/Seoul'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static(CSS, JavaScript, Images), Media(User upload) files
STATIC_ROOT = os.path.join(ROOT_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')


# AWS S3 options
static = os.environ.get('STATIC', '')
STATIC_S3 = static == 's3'
print('STATIC_S3 =', STATIC_S3)


# AWS S3 settings for django-storages third party
if not DEBUG or STATIC_S3:
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_QUERYSTRING_AUTH = False
    AWS_ACCESS_KEY_ID = config['aws']['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = config['aws']['AWS_SECRET_ACCESS_KEY']

    AWS_STORAGE_BUCKET_NAME = config['aws']['AWS_STORAGE_BUCKET_NAME']

    DEFAULT_FILE_STORAGE = 'mysite.custom_storages.MediaStorage'
    AWS_S3_REGION_NAME = config['aws']['s3_region']
    AWS_S3_HOST = 's3-{s3_region}.amazoneaws.com'.format(s3_region=config['aws']['s3_region'])
    AWS_S3_SIGNATURE_VERSION = config['aws']['s3_signature_version']

    STATICFILES_STORAGE = 'mysite.custom_storages.StaticStorage'

    STATICFILES_LOCATION = 'staticfiles'
    STATIC_URL = 'https://s3-{region}.amazonaws.com/{bucket_name}/{file_location}/'.format(
        region=config['aws']['s3_region'],
        bucket_name=AWS_STORAGE_BUCKET_NAME,
        file_location=STATICFILES_LOCATION,
    )
    MEDIAFILES_LOCATION = 'upload_files'
    MEDIA_URL = 'https://s3-{region}.amazonaws.com/{bucket_name}/{file_location}/'.format(
        region=config['aws']['s3_region'],
        bucket_name=AWS_STORAGE_BUCKET_NAME,
        file_location=MEDIAFILES_LOCATION,
    )
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
    STATIC_URL = '/staticfiles/'
    MEDIA_URL = '/upload_files/'


# Rest framework
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning'
}


# logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': 'api %(levelname)s time=%(asctime)s %(message)s path=%(filename)s func=%(funcName)s'
        },
        'simple': {
            'format': 'api %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'watchtower': {
            'level': 'INFO',
            'class': 'watchtower.CloudWatchLogHandler',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['watchtower', 'console'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}
